rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      // Users can read and write their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow other authenticated users to read public profile data
      allow read: if request.auth != null && 
        request.auth.uid != userId && 
        get(/databases/$(database)/documents/users/$(userId)).data.privacy.profilePublic == true;
      
      // Nested collections for user data
      match /likes/{document=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      match /saves/{document=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      match /notifications/{document=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      match /followers/{document=**} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && request.auth.uid != userId;
      }
      
      match /following/{document=**} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Fashion items collection
    match /items/{itemId} {
      // Anyone can read active items
      allow read: if resource.data.isActive == true;
      
      // Only item creators can update their items
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.creatorId &&
        // Don't allow changing core fields maliciously
        request.resource.data.creatorId == resource.data.creatorId &&
        request.resource.data.id == resource.data.id;
      
      // Authenticated users can create items
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.creatorId &&
        // Ensure required fields are present
        request.resource.data.keys().hasAll(['id', 'title', 'description', 'imageUrl', 'creatorId', 'styleTags', 'priceRange']) &&
        // Validate data types
        request.resource.data.isActive is bool &&
        request.resource.data.isFeatured is bool &&
        request.resource.data.styleTags is list &&
        request.resource.data.categories is list;
      
      // Only item creators or admins can delete (soft delete by setting isActive to false)
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.creatorId || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }
    
    // Outfits collection
    match /outfits/{outfitId} {
      // Anyone can read public outfits
      allow read: if resource.data.isPublic == true;
      
      // Users can read their own outfits
      allow read: if request.auth != null && request.auth.uid == resource.data.creatorId;
      
      // Authenticated users can create outfits
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.creatorId &&
        request.resource.data.keys().hasAll(['id', 'title', 'description', 'imageUrl', 'creatorId', 'itemIds', 'styleTags']);
      
      // Only outfit creators can update their outfits
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.creatorId &&
        request.resource.data.creatorId == resource.data.creatorId;
      
      // Only outfit creators can delete their outfits
      allow delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      // Anyone can read reviews
      allow read: if true;
      
      // Authenticated users can create reviews
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        request.resource.data.keys().hasAll(['id', 'itemId', 'userId', 'userName', 'rating', 'comment']) &&
        request.resource.data.rating is number &&
        request.resource.data.rating >= 1 &&
        request.resource.data.rating <= 5;
      
      // Only review authors can update their reviews
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        request.resource.data.userId == resource.data.userId &&
        request.resource.data.itemId == resource.data.itemId;
      
      // Only review authors can delete their reviews
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Analytics collection (for detailed tracking)
    match /analytics/{document} {
      // Only the system can write analytics data
      allow create: if request.auth != null;
      
      // Users can read their own analytics
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Notifications queue (for cloud functions)
    match /notifications_queue/{document} {
      // Only authenticated users can create notification requests
      allow create: if request.auth != null;
      
      // No direct read/update/delete access (handled by cloud functions)
      allow read, update, delete: if false;
    }
    
    // Categories and style tags (read-only reference data)
    match /categories/{document} {
      allow read: if true;
      allow write: if false; // Only admins can modify via console
    }
    
    match /style_tags/{document} {
      allow read: if true;
      allow write: if false; // Only admins can modify via console
    }
    
    // Helper functions
    function isAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isCreator() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isCreator == true;
    }
    
    function isVerifiedUser() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isVerified == true;
    }
    
    // Rate limiting (basic)
    function rateLimitCheck() {
      return request.time > resource.data.lastUpdated + duration.value(1, 's');
    }
  }
}
